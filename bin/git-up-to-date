#!/usr/bin/env bash

# Produces the usage output when the script is asked for help.
#
# @return string The usage text.
usage() {
  cat <<-_usage_statement_
Resets the onto branch to that of ancestor, then cherry-picks commits made
previously to bring it up-to-date.

usage: git-up-to-date
    --help
    --ancestor BRANCH
    --onto BRANCH

arguments:
-a, --ancestor BRANCH The common ancestor for the reset. This is usually the
                      branch you will finally be landing into. This is required.

-o, --onto BRANCH The branch with commits to replay onto itself after the reset.
                  Defaults to the current working branch ($(git rev-parse --abbrev-ref HEAD)).

_usage_statement_
}

# The main method that's called on script execution.
#
# @see usage
main() {
  local dotglob_enabled=$(shopt dotglob | grep on | wc -l)

  # Set some environment changes by enabling dotglob matches
  if [ ! $dotglob_enabled ]; then
    shopt -s dotglob
  fi

  # Declare our script options
  declare \
    ancestor \
    onto

  while :
  do
    case $1 in
      -h | --help | -\?)
        usage
        exit 0
        ;;
      -a | --ancestor)
        ancestor=$2
        shift 2
        ;;
      -o | --onto)
        onto=$2
        shift 2
        ;;
      --) # End of all options
        shift
        break
        ;;
      -*)
        echo "Unknown option (ignored): $1"
        shift
        ;;
      *)  # no more options. Stop while loop
        break
        ;;
    esac
  done

  if [ -z $ancestor ]; then
    echo "The ancestor branch (-a | --ancestor) option is required.\n"
    usage
    exit 1
  fi

  ###########################################################################

  cd "$(git rev-parse --show-toplevel)"

  source "$(git --exec-path)/git-sh-setup"

  # Get the current branch name
  onto_branch=${onto:-$(git rev-parse --abbrev-ref HEAD)}

  # Checkout the branch to reset
  git checkout "${onto_branch}"

  # Get the current HEAD commit has to revert if an error happens
  onto_branch_head_id="$(git rev-parse HEAD)"

  # Before resetting, get list of commits made to this branch
  commits=( $(git rev-list --simplify-by-decoration -2 HEAD) )

  # Reset this branch hard to ancestor
  git reset --hard "${ancestor}"

  # Cherry-pick commits back into branch.
  git cherry-pick "${commits[1]}".."${commits[0]}"

  if [ $? -ne 0 ]; then
    git reset --hard "${onto_branch_head_id}"
  fi

  # Go back to previous branch
  git checkout -

  cd "${PWD}"

  ###########################################################################

  # Revert back the dotglob shell option
  if [ ! $dotglob_enabled ]; then
      shopt -u dotglob
  fi
}

# Call our main function and pass all arguments passed to the script
main "$@"
